{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "discord-embed",
  "type": "registry:component",
  "title": "Discord Embeds",
  "description": "The component for creating Discord embeds",
  "dependencies": ["class-variance-authority", "react"],
  "registryDependencies": [
    "avatar",
    "https://discord-components.com/r/discord-base.json"
  ],
  "files": [
    {
      "path": "registry/discord-embeds/discord-embeds.tsx",
      "content": "import type React from \"react\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { cn } from \"@/lib/utils\";\n\ntype DiscordEmbedLinkItemBaseProps = {\n\tclassName?: string;\n\tchildren: React.ReactNode;\n};\n\ntype DiscordEmbedItemWithoutLink = DiscordEmbedLinkItemBaseProps &\n\tReact.ComponentPropsWithoutRef<\"p\"> & { isLink?: false; href?: never };\ntype DiscordEmbedItemWithLink = DiscordEmbedLinkItemBaseProps &\n\tReact.ComponentPropsWithoutRef<\"a\"> & { isLink: true; href: string };\ntype DiscordEmbedLinkItemProps =\n\t| DiscordEmbedItemWithoutLink\n\t| DiscordEmbedItemWithLink;\n\nfunction DiscordEmbed({\n\tclassName,\n\tchildren,\n\tcolor,\n\tthumbnail,\n\tthumbnailAlt,\n\t...props\n}: React.ComponentProps<\"article\"> & {\n\tcolor?: string;\n\tthumbnail?: string;\n\tthumbnailAlt?: string;\n}) {\n\treturn (\n\t\t<article\n\t\t\tclassName={cn(\n\t\t\t\t\"group grid max-w-[520px] grid-rows-[auto] flex-col rounded-md border border-discord-foreground/5 border-l-4 bg-discord-embed-background pt-[.125rem] pr-[1rem] pb-[1rem] pl-[.75rem]\",\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\tdata-has-thumbnail={!!thumbnail}\n\t\t\tdata-slot=\"discord-embed\"\n\t\t\tstyle={{\n\t\t\t\tborderLeftColor: color ?? \"#5863e4\",\n\t\t\t\tgridTemplateColumns: thumbnail ? \"minmax(0, 1fr)\" : \"auto\"\n\t\t\t}}\n\t\t\t{...props}\n\t\t>\n\t\t\t{thumbnail && (\n\t\t\t\t<div className=\"col-[2/2] row-[1/8] mt-[8px] ml-[16px] hidden justify-self-end object-fill sm:block\">\n\t\t\t\t\t<div className=\"flex h-full w-full flex-row flex-nowrap\">\n\t\t\t\t\t\t<div className=\"relative block rounded-[3px]\">\n\t\t\t\t\t\t\t{/** biome-ignore lint/performance/noImgElement: Keeping it basic */}\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\talt={thumbnailAlt ?? \"Embed thumbnail image\"}\n\t\t\t\t\t\t\t\tclassName=\"h-[80px] w-[80px] rounded-[4px]\"\n\t\t\t\t\t\t\t\tsrc={thumbnail}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t{children}\n\t\t</article>\n\t);\n}\n\nfunction DiscordEmbedAuthor({\n\tclassName,\n\tchildren,\n\t...props\n}: React.ComponentProps<\"div\">) {\n\treturn (\n\t\t<div\n\t\t\tclassName={cn(\"col-[1/1] mt-2 flex items-center\", className)}\n\t\t\tdata-slot=\"discord-embed-author\"\n\t\t\t{...props}\n\t\t>\n\t\t\t{children}\n\t\t</div>\n\t);\n}\n\nfunction DiscordEmbedAuthorName({\n\tclassName,\n\tchildren,\n\tisLink = false,\n\thref,\n\t...props\n}: DiscordEmbedLinkItemProps) {\n\tif (isLink) {\n\t\treturn (\n\t\t\t<a\n\t\t\t\tclassName={cn(\n\t\t\t\t\t\"font-semibold text-[.875rem] text-discord-header hover:underline\",\n\t\t\t\t\tclassName\n\t\t\t\t)}\n\t\t\t\tdata-slot=\"discord-embed-author-name\"\n\t\t\t\thref={href}\n\t\t\t\t{...(props as React.ComponentPropsWithoutRef<\"a\">)}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</a>\n\t\t);\n\t}\n\n\treturn (\n\t\t<p\n\t\t\tclassName={cn(\n\t\t\t\t\"font-semibold text-[.875rem] text-discord-header\",\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\tdata-slot=\"discord-embed-author-name\"\n\t\t\t{...(props as React.ComponentPropsWithoutRef<\"p\">)}\n\t\t>\n\t\t\t{children}\n\t\t</p>\n\t);\n}\n\nfunction DiscordEmbedAuthorImage({\n\tsrc,\n\talt,\n\tfallback,\n\tclassName,\n\t...props\n}: React.ComponentProps<typeof Avatar> & {\n\tsrc: string;\n\talt: string;\n\tfallback: string;\n}) {\n\treturn (\n\t\t<Avatar\n\t\t\tclassName=\"mr-2 h-[24px] w-[24px]\"\n\t\t\tdata-slot=\"discord-embed-author-avatar\"\n\t\t\t{...props}\n\t\t>\n\t\t\t<AvatarImage\n\t\t\t\talt={alt}\n\t\t\t\tclassName={cn(\"rounded-full\", className)}\n\t\t\t\tdata-slot=\"discord-embed-author-image\"\n\t\t\t\tsrc={src}\n\t\t\t/>\n\t\t\t<AvatarFallback data-slot=\"discord-embed-author-fallback\">\n\t\t\t\t{fallback}\n\t\t\t</AvatarFallback>\n\t\t</Avatar>\n\t);\n}\n\nfunction DiscordEmbedTitle({\n\tclassName,\n\tchildren,\n\tisLink = false,\n\thref,\n\t...props\n}: DiscordEmbedLinkItemProps) {\n\treturn (\n\t\t<div\n\t\t\tclassName=\"col-[1/1] mt-[8px] font-semibold text-[1rem] text-discord-header\"\n\t\t\tdata-slot=\"discord-embed-title-wrapper\"\n\t\t>\n\t\t\t{isLink ? (\n\t\t\t\t<a\n\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\"cursor-pointer text-discord-link hover:underline\",\n\t\t\t\t\t\tclassName\n\t\t\t\t\t)}\n\t\t\t\t\tdata-slot=\"discord-embed-title\"\n\t\t\t\t\thref={href}\n\t\t\t\t\tstyle={{ wordBreak: \"break-word\" }}\n\t\t\t\t\t{...(props as React.ComponentPropsWithoutRef<\"a\">)}\n\t\t\t\t>\n\t\t\t\t\t{children}\n\t\t\t\t</a>\n\t\t\t) : (\n\t\t\t\t<p\n\t\t\t\t\tclassName={cn(className)}\n\t\t\t\t\tdata-slot=\"discord-embed-title\"\n\t\t\t\t\tstyle={{ wordBreak: \"break-word\" }}\n\t\t\t\t\t{...(props as React.ComponentPropsWithoutRef<\"p\">)}\n\t\t\t\t>\n\t\t\t\t\t{children}\n\t\t\t\t</p>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nfunction DiscordEmbedDescription({\n\tclassName,\n\tchildren,\n\t...props\n}: React.ComponentProps<\"p\">) {\n\treturn (\n\t\t<p\n\t\t\tclassName={cn(\n\t\t\t\t\"col-[1/1] mt-[8px] text-[.875rem]/[1.125rem] text-discord-foreground\",\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\tdata-slot=\"discord-embed-description\"\n\t\t\t{...props}\n\t\t>\n\t\t\t{children}\n\t\t</p>\n\t);\n}\n\nfunction DiscordEmbedFieldWrapper({\n\tclassName,\n\tchildren,\n\t...props\n}: React.ComponentProps<\"div\">) {\n\treturn (\n\t\t<div\n\t\t\tclassName={cn(\n\t\t\t\t\"col-[1/1] mt-[8px] flex flex-col gap-[8px] sm:grid\",\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\tdata-slot=\"discord-embed-field-wrapper\"\n\t\t\t{...props}\n\t\t>\n\t\t\t{children}\n\t\t</div>\n\t);\n}\n\ntype DiscordEmbedFieldProps = {\n\tname: string | React.ReactNode;\n\tvalue: string | React.ReactNode;\n\tinline?: boolean;\n\twrapperCustomClass?: string;\n\tnameCustomClass?: string;\n\tvalueCustomClass?: string;\n};\n\ntype DiscordEmbedFieldsProps = {\n\tfields: DiscordEmbedFieldProps[];\n\twrapperCustomClass?: string;\n\tnameCustomClass?: string;\n\tvalueCustomClass?: string;\n};\n\nfunction DiscordEmbedFields({\n\tfields,\n\twrapperCustomClass,\n\tnameCustomClass,\n\tvalueCustomClass\n}: DiscordEmbedFieldsProps) {\n\tconst splits: string[] = [];\n\tlet inlineCount = 0;\n\n\tfor (const item of fields) {\n\t\tif (item.inline) {\n\t\t\tinlineCount++;\n\n\t\t\tswitch (inlineCount) {\n\t\t\t\tcase 1:\n\t\t\t\t\tsplits.push(\"1/13\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tsplits[splits.length - 1] = \"1/7\";\n\t\t\t\t\tsplits.push(\"7/13\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tsplits[splits.length - 2] = \"1/5\";\n\t\t\t\t\tsplits[splits.length - 1] = \"5/9\";\n\t\t\t\t\tsplits.push(\"9/13\");\n\t\t\t\t\tinlineCount = 0;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\tinlineCount = 0;\n\t\t\tsplits.push(\"1/13\");\n\t\t}\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t{fields.map((item, index) => (\n\t\t\t\t<div\n\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\"text-[.875rem]/[1.125rem]\",\n\t\t\t\t\t\twrapperCustomClass,\n\t\t\t\t\t\titem.wrapperCustomClass\n\t\t\t\t\t)}\n\t\t\t\t\tkey={`field-${item.name}-${index}`}\n\t\t\t\t\tstyle={{ gridColumn: splits[index] }}\n\t\t\t\t>\n\t\t\t\t\t{typeof item.name === \"string\" ? (\n\t\t\t\t\t\t<p\n\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\"mb-[2px] font-semibold text-discord-header\",\n\t\t\t\t\t\t\t\tnameCustomClass,\n\t\t\t\t\t\t\t\titem.nameCustomClass\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{item.name}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t) : (\n\t\t\t\t\t\titem.name\n\t\t\t\t\t)}\n\n\t\t\t\t\t{typeof item.value === \"string\" ? (\n\t\t\t\t\t\t<p\n\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\"text-discord-foreground\",\n\t\t\t\t\t\t\t\tvalueCustomClass,\n\t\t\t\t\t\t\t\titem.valueCustomClass\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{item.value}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t) : (\n\t\t\t\t\t\titem.value\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t))}\n\t\t</>\n\t);\n}\n\nfunction DiscordEmbedImageWrapper({\n\tclassName,\n\tchildren,\n\t...props\n}: React.ComponentProps<\"div\">) {\n\treturn (\n\t\t<div\n\t\t\tclassName={cn(\n\t\t\t\t\"col-[1/2] mt-[16px] grid grid-cols-2 gap-[4px] overflow-hidden rounded-[4px]\",\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\tdata-slot=\"discord-embed-image-wrapper\"\n\t\t\t{...props}\n\t\t>\n\t\t\t{children}\n\t\t</div>\n\t);\n}\n\ntype DiscordEmbedImage = {\n\tsrc: string;\n\talt: string;\n} & React.ComponentProps<\"img\">;\ntype DiscordEmbedImagesProps = React.ComponentProps<\"div\"> & {\n\timages: readonly [\n\t\tDiscordEmbedImage,\n\t\tDiscordEmbedImage?,\n\t\tDiscordEmbedImage?,\n\t\tDiscordEmbedImage?\n\t];\n};\n\nfunction DiscordEmbedImages({\n\tclassName,\n\tchildren,\n\timages,\n\t...props\n}: DiscordEmbedImagesProps) {\n\tswitch (images.length) {\n\t\tcase 1:\n\t\t\treturn (\n\t\t\t\t<div\n\t\t\t\t\tclassName={cn(\"flex h-full w-full flex-row flex-nowrap\", className)}\n\t\t\t\t\t{...props}\n\t\t\t\t>\n\t\t\t\t\t<DiscordEmbedImage {...images[0]} />\n\t\t\t\t</div>\n\t\t\t);\n\t\tcase 2:\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<div className=\"flex flex-col overflow-hidden\">\n\t\t\t\t\t\t<DiscordEmbedImage {...images[0]} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"flex flex-col overflow-hidden\">\n\t\t\t\t\t\t{/** biome-ignore lint/style/noNonNullAssertion: Images [1] exists here via the switch case */}\n\t\t\t\t\t\t<DiscordEmbedImage {...images[1]!} />\n\t\t\t\t\t</div>\n\t\t\t\t</>\n\t\t\t);\n\t\tcase 3:\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<div className=\"flex flex-col overflow-hidden\">\n\t\t\t\t\t\t<DiscordEmbedImage {...images[0]} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"flex flex-col overflow-hidden\">\n\t\t\t\t\t\t{/** biome-ignore lint/style/noNonNullAssertion: Images [1] exists here via the switch case */}\n\t\t\t\t\t\t<DiscordEmbedImage {...images[1]!} />\n\t\t\t\t\t\t<DiscordEmbedImage\n\t\t\t\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: Images [2] exists here via the switch case\n\t\t\t\t\t\t\t{...images[2]!}\n\t\t\t\t\t\t\tclassName={cn(\"mt-[4px]\", images[2]?.className)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</>\n\t\t\t);\n\t\tcase 4:\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<div className=\"flex flex-col overflow-hidden\">\n\t\t\t\t\t\t<DiscordEmbedImage {...images[0]} />\n\t\t\t\t\t\t<DiscordEmbedImage\n\t\t\t\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: Images [2] exists here via the switch case\n\t\t\t\t\t\t\t{...images[2]!}\n\t\t\t\t\t\t\tclassName={cn(\"mt-[4px]\", images[2]?.className)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"flex flex-col overflow-hidden\">\n\t\t\t\t\t\t{/** biome-ignore lint/style/noNonNullAssertion: Images [1] exists here via the switch case */}\n\t\t\t\t\t\t<DiscordEmbedImage {...images[1]!} />\n\t\t\t\t\t\t<DiscordEmbedImage\n\t\t\t\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: Images [3] exists here via the switch case\n\t\t\t\t\t\t\t{...images[3]!}\n\t\t\t\t\t\t\tclassName={cn(\"mt-[4px]\", images[3]?.className)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</>\n\t\t\t);\n\t\tdefault:\n\t\t\treturn null;\n\t}\n}\n\nfunction DiscordEmbedImage({\n\tclassName,\n\tchildren,\n\tsrc,\n\talt,\n\t...props\n}: DiscordEmbedImage) {\n\treturn (\n\t\t// biome-ignore lint/performance/noImgElement: Keeping it basic\n\t\t<img\n\t\t\talt={alt ?? \"Embed Image\"}\n\t\t\tclassName={cn(\"h-full w-full rounded-[4px] object-cover\", className)}\n\t\t\tdata-slot=\"discord-embed-image\"\n\t\t\tsrc={src}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nfunction DiscordEmbedFooter({\n\tclassName,\n\tchildren,\n\t...props\n}: React.ComponentProps<\"div\">) {\n\treturn (\n\t\t<div\n\t\t\tclassName={cn(\n\t\t\t\t\"col-[1/1] mt-[8px] flex items-center group-data-[has-thumbnail=true]:col-[1/3]\",\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\tdata-slot=\"discord-embed-footer\"\n\t\t\t{...props}\n\t\t>\n\t\t\t{children}\n\t\t</div>\n\t);\n}\n\nfunction DiscordEmbedFooterImage({\n\tsrc,\n\talt,\n\tfallback,\n\tclassName,\n\t...props\n}: React.ComponentProps<typeof Avatar> & {\n\tsrc: string;\n\talt: string;\n\tfallback: string;\n}) {\n\treturn (\n\t\t<Avatar\n\t\t\tclassName=\"mr-[8px] h-[20px] w-[20px]\"\n\t\t\tdata-slot=\"discord-embed-footer-avatar\"\n\t\t\t{...props}\n\t\t>\n\t\t\t<AvatarImage\n\t\t\t\talt={alt}\n\t\t\t\tclassName={cn(\"rounded-full\", className)}\n\t\t\t\tdata-slot=\"discord-embed-footer-image\"\n\t\t\t\tsrc={src}\n\t\t\t/>\n\t\t\t<AvatarFallback data-slot=\"discord-embed-footer-fallback\">\n\t\t\t\t{fallback}\n\t\t\t</AvatarFallback>\n\t\t</Avatar>\n\t);\n}\n\nfunction DiscordEmbedFooterText({\n\tclassName,\n\tchildren,\n\tdate,\n\t...props\n}: React.ComponentProps<\"span\"> & { date?: Date }) {\n\treturn (\n\t\t<span\n\t\t\tclassName={cn(\n\t\t\t\t\"font-medium text-[.75rem]/[1rem] text-discord-foreground\",\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\tdata-slot=\"discord-embed-footer-text\"\n\t\t\t{...props}\n\t\t>\n\t\t\t{children}\n\t\t\t{date && (\n\t\t\t\t<>\n\t\t\t\t\t<span className=\"mx-[4px]\"> • </span>{\" \"}\n\t\t\t\t\t{date\n\t\t\t\t\t\t.toLocaleString()\n\t\t\t\t\t\t.replace(\",\", \"\")\n\t\t\t\t\t\t.split(\":\")\n\t\t\t\t\t\t.map((item, index) =>\n\t\t\t\t\t\t\tindex === 2\n\t\t\t\t\t\t\t\t? item.split(\" \")[1]\n\t\t\t\t\t\t\t\t: `${item}${index === 0 ? \":\" : \" \"}`\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.join(\"\")}\n\t\t\t\t</>\n\t\t\t)}\n\t\t</span>\n\t);\n}\n\nexport {\n\tDiscordEmbed,\n\tDiscordEmbedAuthor,\n\tDiscordEmbedAuthorName,\n\tDiscordEmbedAuthorImage,\n\tDiscordEmbedTitle,\n\tDiscordEmbedDescription,\n\tDiscordEmbedFieldWrapper,\n\tDiscordEmbedFields,\n\tDiscordEmbedImageWrapper,\n\tDiscordEmbedImages,\n\tDiscordEmbedFooter,\n\tDiscordEmbedFooterImage,\n\tDiscordEmbedFooterText\n};\n",
      "type": "registry:component"
    }
  ],
  "cssVars": {
    "light": {
      "discord-embed-background": "oklch(0.2624 0.0093 285.74)"
    }
  },
  "css": {
    "@layer base": {
      ".discord-light": {
        "--discord-embed-background": "oklch(1 0 0)"
      },
      ".discord-classic": {
        "--discord-embed-background": "oklch(0.145 0 0)"
      },
      ".discord-ash": {
        "--discord-embed-background": "oklch(0.3502 0.0122 279.28)"
      },
      ".discord-dark": {
        "--discord-embed-background": "oklch(0.2624 0.0093 285.74)"
      },
      ".discord-onyx": {
        "--discord-embed-background": "oklch(0.191 0.0043 264.47)"
      }
    }
  }
}
